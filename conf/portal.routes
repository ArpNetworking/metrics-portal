# Copyright 2014 Brandon Arp
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ~~~~

# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET        /                                    controllers.Assets.at(path="/public/html", file="index.html")

# Meta
GET        /config                              controllers.MetaController.config()
GET        /ping                                controllers.MetaController.ping()
GET        /status                              controllers.MetaController.status()
GET        /version                             controllers.MetaController.version()

# Telemetry proxy
GET        /v1/proxy/stream                     controllers.TelemetryProxyController.stream(uri: String ?= null)

# Hosts
GET        /v1/hosts/query                      controllers.HostController.query(name: String ?= null, state: String ?= null, cluster: String ?= null, limit: java.lang.Integer ?= null, offset: java.lang.Integer ?= null, sort_by: String ?= null)
GET        /v1/hosts/:id                        controllers.HostController.get(id: String)
PUT        /v1/hosts                            controllers.HostController.addOrUpdate

# Reports
GET        /v1/reports/query                    controllers.ReportController.query(limit: java.lang.Integer ?= null, offset: java.lang.Integer ?= null)
GET        /v1/reports/:id                      controllers.ReportController.get(id: java.util.UUID)
DELETE     /v1/reports/:id                      controllers.ReportController.delete(id: java.util.UUID)
PUT        /v1/reports                          controllers.ReportController.addOrUpdate

# Alerts
GET        /v1/alerts/query                     controllers.AlertController.query(limit: java.lang.Integer ?= null, offset: java.lang.Integer ?= null)
GET        /v1/alerts/:id                       controllers.AlertController.get(id: java.util.UUID)

# Rollups
# vvv This endpoint is currently intended only for debugging purposes. Do not rely on it.
POST        /v1/rollups/check_consistency       controllers.RollupController.enqueueConsistencyCheck()

# Templates
GET        /assets/lib/configure.js             controllers.ApplicationController.getConfigureJs
GET        /assets/html/HeaderViewModel.html    controllers.ApplicationController.getHeaderViewModel

# Kairosdb proxy
GET        /api/v1/metricnames                  controllers.KairosDbProxyController.metricNames(containing: String ?= null, prefix: String ?= null)
GET        /api/v1/health/check                 controllers.KairosDbProxyController.healthCheck()
GET        /api/v1/health/status                controllers.KairosDbProxyController.status()
GET        /api/v1/tagnames                     controllers.KairosDbProxyController.tagNames()
GET        /api/v1/tagvalues                    controllers.KairosDbProxyController.tagValues()
GET        /api/v1/version                      controllers.KairosDbProxyController.version()
POST       /api/v1/datapoints/query/tags        controllers.KairosDbProxyController.queryTags()
POST       /api/v1/datapoints/query             controllers.KairosDbProxyController.queryMetrics()

# Map static resources from the /public folder to the /assets URL path
GET        /assets/*file                        controllers.Assets.versioned(path = "/public", file: Asset)
