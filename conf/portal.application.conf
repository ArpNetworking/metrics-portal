# Copyright 2014 Brandon Arp
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.http.secret.key = "j;CsRfxs6n[6fA>Bb2^4@YVNdNw0omx=2L;=jqvGqfCuouukvF/KSrLJI?e:6xi4"

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
pidfile.path = "/dev/null"
play.server.pidfile.path="/dev/null"
play.modules.disabled += "play.core.ObjectMapperModule"
play.modules.enabled += "global.MainModule"
play.http.actionCreator = "global.ActionCreator"
play.http.errorHandler = "global.ErrorHandler"
play.http.filters = "global.Filters"
play.http.session.httpOnly = false
play.filters.cors.pathPrefixes = ["/v1/", "/api/v1/"]
play.filters.headers.contentSecurityPolicy = "script-src 'self' 'unsafe-eval'"

# Http Server
# ~~~~~
play.server.http.port = 8080

# Router
# ~~~~~
play.http.router = portal.Routes

# Controllers
# ~~~~~
hosts.limit = 1000
alerts.limit = 1000
reports.limit = 1000

# Health Provider
# ~~~~~
http.healthProvider.type = "com.arpnetworking.metrics.portal.health.DefaultHealthProvider"

# Features
# ~~~~~
portal.features {
  # Telemetry
  telemetry.enabled = true

  # Proxy
  proxy.enabled = true
  proxy.preferred = false

  # Host Registry
  hostRegistry.enabled = false

  # Alerts
  alerts.enabled = false

  # Rollups
  rollups.enabled = false

  # Reports
  reports.enabled = false

  # Metrics aggregator ports
  metricsAggregatorDaemonPorts = [7090]
}

# Metrics
# ~~~~~
metrics {
  cluster = "metrics_portal"
  service = "metrics_portal"
  uri = "http://localhost:7090"
  jvm {
    interval = "500 millis"
    dispatchers {
      includeDefaultDispatcher = true
      includeAdditionalDispatchers = []
    }
  }
}

# Organization repository
# ~~~~~
organizationRepository.type = com.arpnetworking.metrics.portal.organizations.impl.DefaultOrganizationRepository

# Host repository
# ~~~~~
hostRepository.type = com.arpnetworking.metrics.portal.hosts.impl.NoHostRepository

# Alert repository
# ~~~~~
alertRepository.type = com.arpnetworking.metrics.portal.alerts.impl.NoAlertRepository

# Report repository
# ~~~~~
reportRepository.type = com.arpnetworking.metrics.portal.reports.impl.NoReportRepository

# Host provider
# ~~~~~
hostProvider {
  type = com.arpnetworking.metrics.portal.hosts.impl.NoHostProvider
  initialDelay = "60s"
  interval = "1h"
}

# Rollups
# ~~~~~
rollup {
  worker.count = 5
  fetch.interval = "1h"
  fetch.backoff = "5min"
  maxBackFill.periods = 2160
  metric.whitelist = []
  metric.blacklist = []
}

# KairosDB proxying
# ~~~~~
kairosdb {
  uri = "http://localhost:8000"
  timeout = "1 hour"
}


# Reporting
# ~~~~~
reporting {
  renderers {
    WEB_PAGE {
      "text/html" {
        type = "com.arpnetworking.metrics.portal.reports.impl.chrome.HtmlScreenshotRenderer"
      }
      "application/pdf" {
        type = "com.arpnetworking.metrics.portal.reports.impl.chrome.PdfScreenshotRenderer"
      }
    }
  }
  senders {
    EMAIL {
      type = "com.arpnetworking.metrics.portal.reports.impl.EmailSender"
      fromAddress = "no-reply+metrics-portal-reporting@invalid.net"
    }
  }
}

# Queries
# ~~~~~
query {
  executors {
    default  {
      type = "com.arpnetworking.metrics.portal.query.impl.NoQueryExecutor"
    }
  }
}

# Akka
# ~~~~~
akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider="akka.cluster.ClusterActorRefProvider"
    debug.unhandled = on
  }
  cluster {
    seed-nodes=["akka.tcp://mportal@127.0.0.1:2558"]
    auto-down-unreachable-after = 300s
    roles = ["host_indexer", "rollup_metrics_discovery"]
    sharding {
      guardian-name="sharding"
      role=""
      retry-interval="2 s"
      buffer-size=100000
      handoff-timeout="60 s"
      rebalance-interval="10 s"
      snapshot-interval="720 s"
      state-store-mode="persistence"
      least-shard-allocation-strategy {
        rebalance-threshold=10
        max-simultaneous-rebalance=3
      }
    }
  }
  remote {
    log-remote-lifecycle-events="on"
    netty.tcp.hostname="127.0.0.1"
    netty.tcp.port=2558
  }
  persistence {
    journal.plugin = "inmemory-journal"
    snapshot-store.plugin = "inmemory-snapshot-store"
  }
  http {
    client {
      parsing.max-content-length = 104857600
      idle-timeout = 600s
    }
    host-connection-pool {
      max-connections = 64
      max-open-requests = 512
    }
  }
}

play.akka.actor-system = "mportal"
play.akka.run-cs-from-phase = "before-cluster-shutdown"

play.server.akka.requestTimeout = 600s
play.server.http.idleTimeout = 600s
